{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["lat","lng","limit","radius","dogParks","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","zip","handleSubmit","bind","assertThisInitialized","event","setState","target","value","preventDefault","length","fetch","then","response","json","data","console","log","results","geometry","location","venues","forEach","element","name","distance","toFixed","park","address","formattedAddress","push","sort","a","b","parseFloat","dogParkLocations","map","react_default","createElement","ReactDOM","render","document","getElementById","catch","alert","_this2","onSubmit","className","htmlFor","id","aria-describedby","onChange","changeZip","placeholder","changeRadius","changeLimit","type","React","Component","App","components_Form","Boolean","window","hostname","match","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de9abd40.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nlet lat;\nlet lng;\nlet limit;\nlet responseData;\nlet radius;\nlet dogParks = [];\n\nconst FOUR_SQUARE_CLIENT_ID =\n  \"client_id=T01WIRMBUSCYUWWMQ0TV03PY4I2WJ0QL4OCM2EP2CM0NOV40\";\nconst FOUR_SQUARE_CLIENT_SECRET =\n  \"client_secret=1MK3A1HIJVPEX3DVBD2ICEOAUGXIQWUYUCIDVWU2OHPWBITO\";\nconst FOUR_SQUARE_VERSION = \"v=20180323\";\nconst FOUR_SQUARE_QUERY = \"query=dog+park\";\n\nclass Form extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      zip: \"\",\n      radius: \"20\",\n      limit: \"10\"\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  changeZip(event) {\n    this.setState({ zip: event.target.value });\n  }\n  changeRadius(event) {\n    this.setState({ radius: event.target.value });\n  }\n  changeLimit(event) {\n    this.setState({ limit: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.state.zip.length === 5) {\n      if (this.state.limit) {\n        limit = this.state.limit;\n        if (this.state.radius >= 1 && this.state.radius <= 100) {\n          radius = this.state.radius;\n          // Starter code for Dog park locator\n          fetch(\n            \"https://maps.googleapis.com/maps/api/geocode/json\" +\n              \"?key=AIzaSyC1_ggHfqAiYngq0Jvro7eUHyXBCCN3mSY\" +\n              (\"&address=\" + this.state.zip)\n          ).then(function(response) {\n            response.json().then(function(data) {\n              console.log(data.results[0].geometry.location);\n              lat = data.results[0].geometry.location.lat;\n              lng = data.results[0].geometry.location.lng;\n              console.log(limit);\n              fetch(\n                \"https://api.foursquare.com/v2/venues/search\" + // Foursquare Places API - *Search* endpoint\n                  (\"?\" + FOUR_SQUARE_CLIENT_ID) +\n                  (\"&\" + FOUR_SQUARE_CLIENT_SECRET) +\n                  (\"&\" + FOUR_SQUARE_VERSION) +\n                  (\"&limit=\" + limit) +\n                  (\"&\" + FOUR_SQUARE_QUERY) +\n                  (\"&radius=\" + radius * 1609.344) +\n                  (\"&ll=\" + lat + \",\" + lng)\n              )\n                .then(function(response) {\n                  // Code for handling API response\n                  response.json().then(function(data) {\n                    responseData = data.response.venues;\n                    responseData.forEach(function(element) {\n                      console.log(\n                        element.name +\n                          \": \" +\n                          (element.location.distance / 1609.344).toFixed(2) +\n                          \" miles away.\"\n                      );\n                      let park = {\n                        name: element.name,\n                        address: element.location.formattedAddress,\n                        distance: (\n                          element.location.distance / 1609.344\n                        ).toFixed(2)\n                      };\n                      dogParks.push(park);\n                    });\n                    dogParks = dogParks.sort((a, b) =>\n                      parseFloat(a.distance) > parseFloat(b.distance) ? 1 : -1\n                    );\n                    console.log(dogParks);\n                    const dogParkLocations = dogParks.map(dogParks => (\n                      <li>\n                        {dogParks.name}, {dogParks.address[0]},{\" \"}\n                        {dogParks.address[1]}\n                        <br />\n                        {dogParks.distance} miles away\n                      </li>\n                    ));\n\n                    ReactDOM.render(\n                      <ul>{dogParkLocations}</ul>,\n                      document.getElementById(\"parkResults\")\n                    );\n                  });\n                })\n                .catch(function() {\n                  // Code for handling errors\n                });\n            });\n          });\n        } else {\n          alert(\"Enter a valid radius\");\n        }\n      } else {\n        alert(\"Enter a valid maximum number of result [1,50]\");\n      }\n    } else {\n      alert(\"Enter a 5 digit zip code\");\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Dog Park Locator</h1>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"zipCode\">Zip Code</label>\n            <input\n              className=\"form-control\"\n              id=\"zipCodeImput\"\n              aria-describedby=\"zipCode\"\n              value={this.state.zip}\n              onChange={event => this.changeZip(event)}\n              placeholder=\"Enter a 5 digit zip code\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"radius\">Radius (mi.)</label>\n            <input\n              className=\"form-control\"\n              id=\"radiusInput\"\n              aria-describedby=\"radius\"\n              value={this.state.radius}\n              onChange={event => this.changeRadius(event)}\n              placeholder=\"Radius (mi.)\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"limit\">Maximum Number of Results</label>\n            <input\n              className=\"form-control\"\n              id=\"limitInput\"\n              aria-describedby=\"limit\"\n              value={this.state.limit}\n              onChange={event => this.changeLimit(event)}\n              placeholder=\"Default is 10\"\n            />\n          </div>\n          <div className=\"text-center\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Submit\n            </button>\n          </div>\n        </form>\n\n        {/* <p>Hello {this.state.zip}!</p> */}\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\n\n// let responseData;\n// let lat;\n// let lng;\n\nfunction App() {\n  return (\n    <div id=\"dog-park\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Form />\n          </div>\n          <div className=\"col-md-6\">\n            <h1>Results</h1>\n            <div id=\"parkResults\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// Bootstrap CSS import\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}